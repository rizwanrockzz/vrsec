-> table create

create table student(sno int,name varchar(30),cgpa float,address tinytext,dob date);


=> DDL COMMANDS: CREATE, ALTER AND DROP 

-> add 

alter table student add roll varchar(10) first/after any-col-name;

-> modify

alter table student modify cgpa int;

alter table student change column name newname datatype;

alter table drop column name-of-column;

alter table student rename to new-student-table;

-> drop

drop table table-name;

drop database db-name;




=> DML COMMANDS : INSERT, UPDATE AND DELETE 

-> insert 

insert into student values(1,"rizwan",9.19,"ashok nagar","2003-07-20");

-> update 

update student set sno = 3,cgpa = 9.10 where name="rizwan";

-> delete 

delete from student where condition;

delete table student;



=> INTEGRITY CONSTRATIONS on TABLES

-> not null

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255) NOT NULL,
    Age int
);


-> unique

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    UNIQUE (ID)
);

-> primary key

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
);


-> foreign key

CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
);

-> check

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (Age>=18)
);

-> default

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Sandnes'
);

-> index

CREATE INDEX idx_lastname
ON Persons (LastName);



=> CREATE, INSERT, UPDATE, DELETE, DROP AND ALTER VIEWS

-> single table

CREATE VIEW DetailsView AS
SELECT NAME, ADDRESS
FROM StudentDetails
WHERE S_ID < 5;

-> multiple tables

CREATE VIEW MarksView AS
SELECT StudentDetails.NAME, StudentDetails.ADDRESS, StudentMarks.MARKS
FROM StudentDetails, StudentMarks
WHERE StudentDetails.NAME = StudentMarks.NAME;


DROP VIEW MarksView;

-> update

CREATE OR REPLACE VIEW MarksView AS
SELECT StudentDetails.NAME, StudentDetails.ADDRESS, StudentMarks.MARKS, StudentMarks.AGE
FROM StudentDetails, StudentMarks
WHERE StudentDetails.NAME = StudentMarks.NAME;


-> insert 

INSERT INTO DetailsView(NAME, ADDRESS)
VALUES("Suresh","Gurgaon");

-> delete

DELETE FROM DetailsView
WHERE NAME="Suresh";


=> SET COMPARISION OPERATORS



=> LIKE, BETWEEN, WHERE, Distinct ,ORDER BY, Alias, EXISTS

->like 

SELECT * FROM Customers
WHERE CustomerName LIKE 'a%';

->where

SELECT * FROM Customers
WHERE Country = 'Mexico';

-> distinct

select distinct student name from student;

->order by

SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC;

-> alias

SELECT CustomerID AS ID, CustomerName AS Customer
FROM Customers;

=> Aggregate operators

easy

=> Group by and Having Keywords 

-> group by

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country;

-> having

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5;


=> joins

SELECT Orders.OrderID, Customers.CustomerName
FROM Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;

SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName
FROM ((Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);




SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;



SELECT Orders.OrderID, Employees.LastName, Employees.FirstName
FROM Orders
RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
ORDER BY Orders.OrderID;


SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
CROSS JOIN Orders;



























